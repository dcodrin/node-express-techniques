{
  "version": 3,
  "sources": [
    "meadowlark.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "meadowlark-compiled.js",
  "sourcesContent": [
    "import express from 'express';\nimport handlebars from'express-handlebars';\nimport bodyParser from 'body-parser';\nimport cookieParser from 'cookie-parser';\nimport expressSession from 'express-session';\nimport morgan from 'morgan';\nimport cluster from 'cluster';\nimport {create} from 'domain';\nimport connectMongo from 'connect-mongo';\nimport cors from 'cors';\n\nimport connection from './db/connection';\nimport seedDatabase from './db/dbseed';\nimport routes from './routes';\nimport endpoints from './rest-api/endpoints';\nimport credentials from './credentials';\n\nconst app = express();\n\n// establish db connection based on environment;\nconst mongooseConnection = connection(app.get('env'));\n// seed database with data with none present\nseedDatabase();\n\n// set mongo session store through mlab\n\nconst MongoStore = connectMongo(expressSession);\n\n// handle uncaught errors\napp.use((req, res, next) => {\n    // create domain fro request\n    const domain = create();\n    // handle errors on domain\n    domain.on('error', (err) => {\n        console.error('DOMAIN ERROR CAUGHT\\n', err.stack);\n\n        try {\n            // failsafe shutdown in 5 seconds\n            setTimeout(() => {\n                console.error('Failsafe shutdown.');\n                process.exit(1);\n            }, 5000);\n\n            //disconnect from cluster\n            const worker = cluster.worker;\n            if (worker) {\n                worker.disconnect();\n            }\n\n            // stop taking new requests\n            startServer().close();\n\n            try {\n                // attempt to use Express error route\n                next(err);\n            } catch (err) {\n                // if Express error route fails try Node response\n                console.error('Express error route failed\\n', err.stack);\n                res.status(500);\n                res.setHeader('content-tpe', 'text/plain');\n                res.end('Server error');\n            }\n        } catch (err) {\n            console.error('Unable to send 500 response.\\n', err.stack);\n        }\n    });\n\n    // add the req and res objects to the domain\n    domain.add(req);\n    domain.add(res);\n\n    // execute the rest of the request chain\n    domain.run(next);\n});\n\n//cluster middleware to check which worker is handling request\napp.use((req, res, next) => {\n    if (cluster.isWorker) {\n        console.log(`Worker ${cluster.worker.id} received request.`)\n    }\n    next();\n});\n\n//handlebars helpers\nconst helpers = {\n    section: function (name, options) {\n        if (!this._sections) {\n            this._sections = {};\n        }\n        this._sections[name] = options.fn(this);\n        return null;\n    }\n};\n\n//set up handlebars  view engine\nconst engine = handlebars.create({defaultLayout: 'main', helpers}).engine;\napp.engine('handlebars', engine);\napp.set('view engine', 'handlebars');\n\napp.set('port', process.env.PORT || 3000);\n\n//serve static content\napp.use(express.static(__dirname + '/public'));\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({extended: true}));\n\n// parse application/json\napp.use(bodyParser.json());\n\n//parse cookies, pass cookie secret as argument\napp.use(cookieParser(credentials.cookieSecret));\n\napp.use(expressSession({\n    resave: false,\n    saveUninitialized: false,\n    secret: credentials.cookieSecret,\n    store: new MongoStore({mongooseConnection: mongooseConnection.connection})\n}));\n\n//test middleware\napp.use((req, res, next) => {\n    res.locals.showTests = app.get('env') !== 'production' && req.query.test === '1';\n    next();\n});\n\n//flash messages\n//NOTE: to display flash messages make sure to redirect after setting the message\napp.use((req, res, next) => {\n    //if there's a flash message, transfer it to the context then clear it\n    res.locals.flash = req.session.flash;\n    delete req.session.flash;\n    next();\n});\n\napp.use(morgan('dev'));\n\n//cors for api only\napp.use('/api', cors());\n\n//handle routes\nroutes(app);\n\n//handle rest endpoints\nendpoints(app);\n\n//custom 404 page\n//404 responses are not the result of an error, error-handler middleware will not capture them\n//add at the very bottom of the stack\napp.use((req, res)=> {\n    res.status(404).render('404');\n});\n\n//custom 500 page\n//error handling middleware accepts 4 arguments\napp.use((err, req, res, next) => {\n    console.error(err); // eslint-disable-line no-console\n    res.status(500).render('500');\n});\n\nconst startServer = () => {\n    return app.listen(app.get('port'), () => {\n        console.log('Express started in ' + app.get('env') + ' mode on http://localhost:' + app.get('port') + ';'); // eslint-disable-line no-console\n    });\n};\n\n// check to see if module is run directly as node meadowlark.js or is required in another module\nif (require.main === module) {\n    // app is run directly, run server\n    startServer();\n} else {\n    // app is imported from another file via require\n    module.exports = startServer;\n}"
  ]
}